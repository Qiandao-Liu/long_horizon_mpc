class ActionParam:
    def __init__(self, H: int, device="cuda"):
        self.param = torch.zeros(H*2, 3, device=device, dtype=torch.float32, requires_grad=True)

    def zero_(self): ...
    def shift_left_and_pad_(self, steps: int = 1): ...
    def clamp_pre_tanh_(self, clip: float): ...

def rowwise_normalized_step(param: torch.Tensor, grad: torch.Tensor, step_row: float) -> None: ...
def clip_grad_(param: torch.Tensor, max_norm: float) -> None: ...
def linesearch_update(sim_mgr: SimManager, base_state: dict, param: torch.Tensor,
                      grad: torch.Tensor, cfg: MPCConfig, loss_fn) -> None:
    """回溯线搜索；需要一个纯前向评估 loss 的闭包"""
